// copyright: Copyright (c) 2024 Lowell D. Thomas, all rights reserved<br>
//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>
//
// Generated by apg-js, Version 4.4.0 [apg-js](https://github.com/ldthomas/apg-js)
module.exports = function grammar(){
  // ```
  // SUMMARY
  //      rules = 91
  //       udts = 0
  //    opcodes = 545
  //        ---   ABNF original opcodes
  //        ALT = 35
  //        CAT = 69
  //        REP = 98
  //        RNM = 236
  //        TLS = 39
  //        TBS = 56
  //        TRG = 12
  //        ---   SABNF superset opcodes
  //        UDT = 0
  //        AND = 0
  //        NOT = 0
  //        BKA = 0
  //        BKN = 0
  //        BKR = 0
  //        ABG = 0
  //        AEN = 0
  // characters = [9 - 1114111]
  // ```
  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = { name: 'idl', lower: 'idl', index: 0, isBkr: false };
  this.rules[1] = { name: 'WS', lower: 'ws', index: 1, isBkr: false };
  this.rules[2] = { name: 'Comma', lower: 'comma', index: 2, isBkr: false };
  this.rules[3] = { name: 'SP', lower: 'sp', index: 3, isBkr: false };
  this.rules[4] = { name: 'NL', lower: 'nl', index: 4, isBkr: false };
  this.rules[5] = { name: 'NotNL', lower: 'notnl', index: 5, isBkr: false };
  this.rules[6] = { name: 'BR', lower: 'br', index: 6, isBkr: false };
  this.rules[7] = { name: 'Comment', lower: 'comment', index: 7, isBkr: false };
  this.rules[8] = { name: 'DocumentationComment', lower: 'documentationcomment', index: 8, isBkr: false };
  this.rules[9] = { name: 'LineComment', lower: 'linecomment', index: 9, isBkr: false };
  this.rules[10] = { name: 'ControlSection', lower: 'controlsection', index: 10, isBkr: false };
  this.rules[11] = { name: 'ControlStatement', lower: 'controlstatement', index: 11, isBkr: false };
  this.rules[12] = { name: 'MetadataSection', lower: 'metadatasection', index: 12, isBkr: false };
  this.rules[13] = { name: 'MetadataStatement', lower: 'metadatastatement', index: 13, isBkr: false };
  this.rules[14] = { name: 'NodeValue', lower: 'nodevalue', index: 14, isBkr: false };
  this.rules[15] = { name: 'NodeArray', lower: 'nodearray', index: 15, isBkr: false };
  this.rules[16] = { name: 'NodeObject', lower: 'nodeobject', index: 16, isBkr: false };
  this.rules[17] = { name: 'NodeObjectKvp', lower: 'nodeobjectkvp', index: 17, isBkr: false };
  this.rules[18] = { name: 'NodeObjectKey', lower: 'nodeobjectkey', index: 18, isBkr: false };
  this.rules[19] = { name: 'Number', lower: 'number', index: 19, isBkr: false };
  this.rules[20] = { name: 'DecimalPoint', lower: 'decimalpoint', index: 20, isBkr: false };
  this.rules[21] = { name: 'DigitOneToNine', lower: 'digitonetonine', index: 21, isBkr: false };
  this.rules[22] = { name: 'E', lower: 'e', index: 22, isBkr: false };
  this.rules[23] = { name: 'Exp', lower: 'exp', index: 23, isBkr: false };
  this.rules[24] = { name: 'Frac', lower: 'frac', index: 24, isBkr: false };
  this.rules[25] = { name: 'Int', lower: 'int', index: 25, isBkr: false };
  this.rules[26] = { name: 'Minus', lower: 'minus', index: 26, isBkr: false };
  this.rules[27] = { name: 'Plus', lower: 'plus', index: 27, isBkr: false };
  this.rules[28] = { name: 'Zero', lower: 'zero', index: 28, isBkr: false };
  this.rules[29] = { name: 'NodeKeyword', lower: 'nodekeyword', index: 29, isBkr: false };
  this.rules[30] = { name: 'NodeStringValue', lower: 'nodestringvalue', index: 30, isBkr: false };
  this.rules[31] = { name: 'QuotedText', lower: 'quotedtext', index: 31, isBkr: false };
  this.rules[32] = { name: 'QuotedChar', lower: 'quotedchar', index: 32, isBkr: false };
  this.rules[33] = { name: 'EscapedChar', lower: 'escapedchar', index: 33, isBkr: false };
  this.rules[34] = { name: 'UnicodeEscape', lower: 'unicodeescape', index: 34, isBkr: false };
  this.rules[35] = { name: 'Hex', lower: 'hex', index: 35, isBkr: false };
  this.rules[36] = { name: 'Escape', lower: 'escape', index: 36, isBkr: false };
  this.rules[37] = { name: 'TextBlock', lower: 'textblock', index: 37, isBkr: false };
  this.rules[38] = { name: 'TextBlockContent', lower: 'textblockcontent', index: 38, isBkr: false };
  this.rules[39] = { name: 'ThreeDquotes', lower: 'threedquotes', index: 39, isBkr: false };
  this.rules[40] = { name: 'ShapeSection', lower: 'shapesection', index: 40, isBkr: false };
  this.rules[41] = { name: 'NamespaceStatement', lower: 'namespacestatement', index: 41, isBkr: false };
  this.rules[42] = { name: 'UseSection', lower: 'usesection', index: 42, isBkr: false };
  this.rules[43] = { name: 'UseStatement', lower: 'usestatement', index: 43, isBkr: false };
  this.rules[44] = { name: 'ShapeStatements', lower: 'shapestatements', index: 44, isBkr: false };
  this.rules[45] = { name: 'ShapeOrApplyStatement', lower: 'shapeorapplystatement', index: 45, isBkr: false };
  this.rules[46] = { name: 'ShapeStatement', lower: 'shapestatement', index: 46, isBkr: false };
  this.rules[47] = { name: 'Shape', lower: 'shape', index: 47, isBkr: false };
  this.rules[48] = { name: 'SimpleShape', lower: 'simpleshape', index: 48, isBkr: false };
  this.rules[49] = { name: 'SimpleTypeName', lower: 'simpletypename', index: 49, isBkr: false };
  this.rules[50] = { name: 'Mixins', lower: 'mixins', index: 50, isBkr: false };
  this.rules[51] = { name: 'EnumShape', lower: 'enumshape', index: 51, isBkr: false };
  this.rules[52] = { name: 'EnumTypeName', lower: 'enumtypename', index: 52, isBkr: false };
  this.rules[53] = { name: 'EnumShapeMembers', lower: 'enumshapemembers', index: 53, isBkr: false };
  this.rules[54] = { name: 'EnumShapeMember', lower: 'enumshapemember', index: 54, isBkr: false };
  this.rules[55] = { name: 'ValueAssignment', lower: 'valueassignment', index: 55, isBkr: false };
  this.rules[56] = { name: 'AggregateShape', lower: 'aggregateshape', index: 56, isBkr: false };
  this.rules[57] = { name: 'AggregateTypeName', lower: 'aggregatetypename', index: 57, isBkr: false };
  this.rules[58] = { name: 'ForResource', lower: 'forresource', index: 58, isBkr: false };
  this.rules[59] = { name: 'ShapeMembers', lower: 'shapemembers', index: 59, isBkr: false };
  this.rules[60] = { name: 'ShapeMember', lower: 'shapemember', index: 60, isBkr: false };
  this.rules[61] = { name: 'ExplicitShapeMember', lower: 'explicitshapemember', index: 61, isBkr: false };
  this.rules[62] = { name: 'ElidedShapeMember', lower: 'elidedshapemember', index: 62, isBkr: false };
  this.rules[63] = { name: 'EntityShape', lower: 'entityshape', index: 63, isBkr: false };
  this.rules[64] = { name: 'EntityTypeName', lower: 'entitytypename', index: 64, isBkr: false };
  this.rules[65] = { name: 'OperationShape', lower: 'operationshape', index: 65, isBkr: false };
  this.rules[66] = { name: 'OperationBody', lower: 'operationbody', index: 66, isBkr: false };
  this.rules[67] = { name: 'OperationProperty', lower: 'operationproperty', index: 67, isBkr: false };
  this.rules[68] = { name: 'OperationInput', lower: 'operationinput', index: 68, isBkr: false };
  this.rules[69] = { name: 'OperationOutput', lower: 'operationoutput', index: 69, isBkr: false };
  this.rules[70] = { name: 'OperationErrors', lower: 'operationerrors', index: 70, isBkr: false };
  this.rules[71] = { name: 'InlineAggregateShape', lower: 'inlineaggregateshape', index: 71, isBkr: false };
  this.rules[72] = { name: 'TraitStatements', lower: 'traitstatements', index: 72, isBkr: false };
  this.rules[73] = { name: 'Trait', lower: 'trait', index: 73, isBkr: false };
  this.rules[74] = { name: 'TraitBody', lower: 'traitbody', index: 74, isBkr: false };
  this.rules[75] = { name: 'TraitStructure', lower: 'traitstructure', index: 75, isBkr: false };
  this.rules[76] = { name: 'TraitNode', lower: 'traitnode', index: 76, isBkr: false };
  this.rules[77] = { name: 'ApplyStatement', lower: 'applystatement', index: 77, isBkr: false };
  this.rules[78] = { name: 'ApplyStatementSingular', lower: 'applystatementsingular', index: 78, isBkr: false };
  this.rules[79] = { name: 'ApplyStatementBlock', lower: 'applystatementblock', index: 79, isBkr: false };
  this.rules[80] = { name: 'ShapeId', lower: 'shapeid', index: 80, isBkr: false };
  this.rules[81] = { name: 'RootShapeId', lower: 'rootshapeid', index: 81, isBkr: false };
  this.rules[82] = { name: 'AbsoluteRootShapeId', lower: 'absoluterootshapeid', index: 82, isBkr: false };
  this.rules[83] = { name: 'Namespace', lower: 'namespace', index: 83, isBkr: false };
  this.rules[84] = { name: 'Identifier', lower: 'identifier', index: 84, isBkr: false };
  this.rules[85] = { name: 'IdentifierStart', lower: 'identifierstart', index: 85, isBkr: false };
  this.rules[86] = { name: 'IdentifierChars', lower: 'identifierchars', index: 86, isBkr: false };
  this.rules[87] = { name: 'ShapeIdMember', lower: 'shapeidmember', index: 87, isBkr: false };
  this.rules[88] = { name: 'ALPHA', lower: 'alpha', index: 88, isBkr: false };
  this.rules[89] = { name: 'DIGIT', lower: 'digit', index: 89, isBkr: false };
  this.rules[90] = { name: 'DQUOTE', lower: 'dquote', index: 90, isBkr: false };

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* idl */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = { type: 2, children: [1,3,4,5] };// CAT
  this.rules[0].opcodes[1] = { type: 3, min: 0, max: 1 };// REP
  this.rules[0].opcodes[2] = { type: 4, index: 1 };// RNM(WS)
  this.rules[0].opcodes[3] = { type: 4, index: 10 };// RNM(ControlSection)
  this.rules[0].opcodes[4] = { type: 4, index: 12 };// RNM(MetadataSection)
  this.rules[0].opcodes[5] = { type: 4, index: 40 };// RNM(ShapeSection)

  /* WS */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[1].opcodes[1] = { type: 1, children: [2,3,4,5] };// ALT
  this.rules[1].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[1].opcodes[3] = { type: 4, index: 4 };// RNM(NL)
  this.rules[1].opcodes[4] = { type: 4, index: 7 };// RNM(Comment)
  this.rules[1].opcodes[5] = { type: 4, index: 2 };// RNM(Comma)

  /* Comma */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = { type: 7, string: [44] };// TLS

  /* SP */
  this.rules[3].opcodes = [];
  this.rules[3].opcodes[0] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[3].opcodes[1] = { type: 1, children: [2,3] };// ALT
  this.rules[3].opcodes[2] = { type: 6, string: [32] };// TBS
  this.rules[3].opcodes[3] = { type: 6, string: [9] };// TBS

  /* NL */
  this.rules[4].opcodes = [];
  this.rules[4].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[4].opcodes[1] = { type: 6, string: [10] };// TBS
  this.rules[4].opcodes[2] = { type: 6, string: [13,10] };// TBS

  /* NotNL */
  this.rules[5].opcodes = [];
  this.rules[5].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[5].opcodes[1] = { type: 6, string: [9] };// TBS
  this.rules[5].opcodes[2] = { type: 5, min: 32, max: 1114111 };// TRG

  /* BR */
  this.rules[6].opcodes = [];
  this.rules[6].opcodes[0] = { type: 2, children: [1,3,7] };// CAT
  this.rules[6].opcodes[1] = { type: 3, min: 0, max: 1 };// REP
  this.rules[6].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[6].opcodes[3] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[6].opcodes[4] = { type: 1, children: [5,6] };// ALT
  this.rules[6].opcodes[5] = { type: 4, index: 7 };// RNM(Comment)
  this.rules[6].opcodes[6] = { type: 4, index: 4 };// RNM(NL)
  this.rules[6].opcodes[7] = { type: 3, min: 0, max: 1 };// REP
  this.rules[6].opcodes[8] = { type: 4, index: 1 };// RNM(WS)

  /* Comment */
  this.rules[7].opcodes = [];
  this.rules[7].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[7].opcodes[1] = { type: 4, index: 8 };// RNM(DocumentationComment)
  this.rules[7].opcodes[2] = { type: 4, index: 9 };// RNM(LineComment)

  /* DocumentationComment */
  this.rules[8].opcodes = [];
  this.rules[8].opcodes[0] = { type: 2, children: [1,2,4] };// CAT
  this.rules[8].opcodes[1] = { type: 7, string: [47,47,47] };// TLS
  this.rules[8].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[8].opcodes[3] = { type: 4, index: 5 };// RNM(NotNL)
  this.rules[8].opcodes[4] = { type: 4, index: 4 };// RNM(NL)

  /* LineComment */
  this.rules[9].opcodes = [];
  this.rules[9].opcodes[0] = { type: 2, children: [1,2,10] };// CAT
  this.rules[9].opcodes[1] = { type: 7, string: [47,47] };// TLS
  this.rules[9].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[9].opcodes[3] = { type: 2, children: [4,8] };// CAT
  this.rules[9].opcodes[4] = { type: 1, children: [5,6,7] };// ALT
  this.rules[9].opcodes[5] = { type: 6, string: [9] };// TBS
  this.rules[9].opcodes[6] = { type: 5, min: 32, max: 46 };// TRG
  this.rules[9].opcodes[7] = { type: 5, min: 48, max: 69631 };// TRG
  this.rules[9].opcodes[8] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[9].opcodes[9] = { type: 4, index: 5 };// RNM(NotNL)
  this.rules[9].opcodes[10] = { type: 4, index: 4 };// RNM(NL)

  /* ControlSection */
  this.rules[10].opcodes = [];
  this.rules[10].opcodes[0] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[10].opcodes[1] = { type: 4, index: 11 };// RNM(ControlStatement)

  /* ControlStatement */
  this.rules[11].opcodes = [];
  this.rules[11].opcodes[0] = { type: 2, children: [1,2,3,5,6,8,9] };// CAT
  this.rules[11].opcodes[1] = { type: 7, string: [36] };// TLS
  this.rules[11].opcodes[2] = { type: 4, index: 18 };// RNM(NodeObjectKey)
  this.rules[11].opcodes[3] = { type: 3, min: 0, max: 1 };// REP
  this.rules[11].opcodes[4] = { type: 4, index: 3 };// RNM(SP)
  this.rules[11].opcodes[5] = { type: 7, string: [58] };// TLS
  this.rules[11].opcodes[6] = { type: 3, min: 0, max: 1 };// REP
  this.rules[11].opcodes[7] = { type: 4, index: 3 };// RNM(SP)
  this.rules[11].opcodes[8] = { type: 4, index: 14 };// RNM(NodeValue)
  this.rules[11].opcodes[9] = { type: 4, index: 6 };// RNM(BR)

  /* MetadataSection */
  this.rules[12].opcodes = [];
  this.rules[12].opcodes[0] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[12].opcodes[1] = { type: 4, index: 13 };// RNM(MetadataStatement)

  /* MetadataStatement */
  this.rules[13].opcodes = [];
  this.rules[13].opcodes[0] = { type: 2, children: [1,2,3,4,6,7,9,10] };// CAT
  this.rules[13].opcodes[1] = { type: 6, string: [109,101,116,97,100,97,116,97] };// TBS
  this.rules[13].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[13].opcodes[3] = { type: 4, index: 18 };// RNM(NodeObjectKey)
  this.rules[13].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[13].opcodes[5] = { type: 4, index: 3 };// RNM(SP)
  this.rules[13].opcodes[6] = { type: 7, string: [61] };// TLS
  this.rules[13].opcodes[7] = { type: 3, min: 0, max: 1 };// REP
  this.rules[13].opcodes[8] = { type: 4, index: 3 };// RNM(SP)
  this.rules[13].opcodes[9] = { type: 4, index: 14 };// RNM(NodeValue)
  this.rules[13].opcodes[10] = { type: 4, index: 6 };// RNM(BR)

  /* NodeValue */
  this.rules[14].opcodes = [];
  this.rules[14].opcodes[0] = { type: 1, children: [1,2,3,4,5] };// ALT
  this.rules[14].opcodes[1] = { type: 4, index: 15 };// RNM(NodeArray)
  this.rules[14].opcodes[2] = { type: 4, index: 16 };// RNM(NodeObject)
  this.rules[14].opcodes[3] = { type: 4, index: 19 };// RNM(Number)
  this.rules[14].opcodes[4] = { type: 4, index: 29 };// RNM(NodeKeyword)
  this.rules[14].opcodes[5] = { type: 4, index: 30 };// RNM(NodeStringValue)

  /* NodeArray */
  this.rules[15].opcodes = [];
  this.rules[15].opcodes[0] = { type: 2, children: [1,2,4,9] };// CAT
  this.rules[15].opcodes[1] = { type: 7, string: [91] };// TLS
  this.rules[15].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[15].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[15].opcodes[4] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[15].opcodes[5] = { type: 2, children: [6,7] };// CAT
  this.rules[15].opcodes[6] = { type: 4, index: 14 };// RNM(NodeValue)
  this.rules[15].opcodes[7] = { type: 3, min: 0, max: 1 };// REP
  this.rules[15].opcodes[8] = { type: 4, index: 1 };// RNM(WS)
  this.rules[15].opcodes[9] = { type: 7, string: [93] };// TLS

  /* NodeObject */
  this.rules[16].opcodes = [];
  this.rules[16].opcodes[0] = { type: 2, children: [1,2,4,11,13] };// CAT
  this.rules[16].opcodes[1] = { type: 7, string: [123] };// TLS
  this.rules[16].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[16].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[16].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[16].opcodes[5] = { type: 2, children: [6,7] };// CAT
  this.rules[16].opcodes[6] = { type: 4, index: 17 };// RNM(NodeObjectKvp)
  this.rules[16].opcodes[7] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[16].opcodes[8] = { type: 2, children: [9,10] };// CAT
  this.rules[16].opcodes[9] = { type: 4, index: 1 };// RNM(WS)
  this.rules[16].opcodes[10] = { type: 4, index: 17 };// RNM(NodeObjectKvp)
  this.rules[16].opcodes[11] = { type: 3, min: 0, max: 1 };// REP
  this.rules[16].opcodes[12] = { type: 4, index: 1 };// RNM(WS)
  this.rules[16].opcodes[13] = { type: 7, string: [125] };// TLS

  /* NodeObjectKvp */
  this.rules[17].opcodes = [];
  this.rules[17].opcodes[0] = { type: 2, children: [1,2,4,5,7] };// CAT
  this.rules[17].opcodes[1] = { type: 4, index: 18 };// RNM(NodeObjectKey)
  this.rules[17].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[17].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[17].opcodes[4] = { type: 7, string: [58] };// TLS
  this.rules[17].opcodes[5] = { type: 3, min: 0, max: 1 };// REP
  this.rules[17].opcodes[6] = { type: 4, index: 1 };// RNM(WS)
  this.rules[17].opcodes[7] = { type: 4, index: 14 };// RNM(NodeValue)

  /* NodeObjectKey */
  this.rules[18].opcodes = [];
  this.rules[18].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[18].opcodes[1] = { type: 4, index: 31 };// RNM(QuotedText)
  this.rules[18].opcodes[2] = { type: 4, index: 84 };// RNM(Identifier)

  /* Number */
  this.rules[19].opcodes = [];
  this.rules[19].opcodes[0] = { type: 2, children: [1,3,4,6] };// CAT
  this.rules[19].opcodes[1] = { type: 3, min: 0, max: 1 };// REP
  this.rules[19].opcodes[2] = { type: 4, index: 26 };// RNM(Minus)
  this.rules[19].opcodes[3] = { type: 4, index: 25 };// RNM(Int)
  this.rules[19].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[19].opcodes[5] = { type: 4, index: 24 };// RNM(Frac)
  this.rules[19].opcodes[6] = { type: 3, min: 0, max: 1 };// REP
  this.rules[19].opcodes[7] = { type: 4, index: 23 };// RNM(Exp)

  /* DecimalPoint */
  this.rules[20].opcodes = [];
  this.rules[20].opcodes[0] = { type: 6, string: [46] };// TBS

  /* DigitOneToNine */
  this.rules[21].opcodes = [];
  this.rules[21].opcodes[0] = { type: 5, min: 49, max: 57 };// TRG

  /* E */
  this.rules[22].opcodes = [];
  this.rules[22].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[22].opcodes[1] = { type: 6, string: [101] };// TBS
  this.rules[22].opcodes[2] = { type: 6, string: [69] };// TBS

  /* Exp */
  this.rules[23].opcodes = [];
  this.rules[23].opcodes[0] = { type: 2, children: [1,2,6] };// CAT
  this.rules[23].opcodes[1] = { type: 4, index: 22 };// RNM(E)
  this.rules[23].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[23].opcodes[3] = { type: 1, children: [4,5] };// ALT
  this.rules[23].opcodes[4] = { type: 4, index: 26 };// RNM(Minus)
  this.rules[23].opcodes[5] = { type: 4, index: 27 };// RNM(Plus)
  this.rules[23].opcodes[6] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[23].opcodes[7] = { type: 4, index: 89 };// RNM(DIGIT)

  /* Frac */
  this.rules[24].opcodes = [];
  this.rules[24].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[24].opcodes[1] = { type: 4, index: 20 };// RNM(DecimalPoint)
  this.rules[24].opcodes[2] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[24].opcodes[3] = { type: 4, index: 89 };// RNM(DIGIT)

  /* Int */
  this.rules[25].opcodes = [];
  this.rules[25].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[25].opcodes[1] = { type: 4, index: 28 };// RNM(Zero)
  this.rules[25].opcodes[2] = { type: 2, children: [3,4] };// CAT
  this.rules[25].opcodes[3] = { type: 4, index: 21 };// RNM(DigitOneToNine)
  this.rules[25].opcodes[4] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[25].opcodes[5] = { type: 4, index: 89 };// RNM(DIGIT)

  /* Minus */
  this.rules[26].opcodes = [];
  this.rules[26].opcodes[0] = { type: 6, string: [45] };// TBS

  /* Plus */
  this.rules[27].opcodes = [];
  this.rules[27].opcodes[0] = { type: 6, string: [43] };// TBS

  /* Zero */
  this.rules[28].opcodes = [];
  this.rules[28].opcodes[0] = { type: 6, string: [48] };// TBS

  /* NodeKeyword */
  this.rules[29].opcodes = [];
  this.rules[29].opcodes[0] = { type: 1, children: [1,2,3] };// ALT
  this.rules[29].opcodes[1] = { type: 6, string: [116,114,117,101] };// TBS
  this.rules[29].opcodes[2] = { type: 6, string: [102,97,108,115,101] };// TBS
  this.rules[29].opcodes[3] = { type: 6, string: [110,117,108,108] };// TBS

  /* NodeStringValue */
  this.rules[30].opcodes = [];
  this.rules[30].opcodes[0] = { type: 1, children: [1,2,3] };// ALT
  this.rules[30].opcodes[1] = { type: 4, index: 80 };// RNM(ShapeId)
  this.rules[30].opcodes[2] = { type: 4, index: 37 };// RNM(TextBlock)
  this.rules[30].opcodes[3] = { type: 4, index: 31 };// RNM(QuotedText)

  /* QuotedText */
  this.rules[31].opcodes = [];
  this.rules[31].opcodes[0] = { type: 2, children: [1,2,4] };// CAT
  this.rules[31].opcodes[1] = { type: 4, index: 90 };// RNM(DQUOTE)
  this.rules[31].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[31].opcodes[3] = { type: 4, index: 32 };// RNM(QuotedChar)
  this.rules[31].opcodes[4] = { type: 4, index: 90 };// RNM(DQUOTE)

  /* QuotedChar */
  this.rules[32].opcodes = [];
  this.rules[32].opcodes[0] = { type: 1, children: [1,2,3,4,5,6] };// ALT
  this.rules[32].opcodes[1] = { type: 6, string: [9] };// TBS
  this.rules[32].opcodes[2] = { type: 5, min: 32, max: 33 };// TRG
  this.rules[32].opcodes[3] = { type: 5, min: 35, max: 91 };// TRG
  this.rules[32].opcodes[4] = { type: 5, min: 93, max: 1114111 };// TRG
  this.rules[32].opcodes[5] = { type: 4, index: 33 };// RNM(EscapedChar)
  this.rules[32].opcodes[6] = { type: 4, index: 4 };// RNM(NL)

  /* EscapedChar */
  this.rules[33].opcodes = [];
  this.rules[33].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[33].opcodes[1] = { type: 4, index: 36 };// RNM(Escape)
  this.rules[33].opcodes[2] = { type: 1, children: [3,4,5,6,7,8,9,10,11] };// ALT
  this.rules[33].opcodes[3] = { type: 4, index: 36 };// RNM(Escape)
  this.rules[33].opcodes[4] = { type: 4, index: 90 };// RNM(DQUOTE)
  this.rules[33].opcodes[5] = { type: 6, string: [98] };// TBS
  this.rules[33].opcodes[6] = { type: 6, string: [102] };// TBS
  this.rules[33].opcodes[7] = { type: 6, string: [110] };// TBS
  this.rules[33].opcodes[8] = { type: 6, string: [114] };// TBS
  this.rules[33].opcodes[9] = { type: 6, string: [116] };// TBS
  this.rules[33].opcodes[10] = { type: 7, string: [47] };// TLS
  this.rules[33].opcodes[11] = { type: 4, index: 34 };// RNM(UnicodeEscape)

  /* UnicodeEscape */
  this.rules[34].opcodes = [];
  this.rules[34].opcodes[0] = { type: 2, children: [1,2,3,4,5] };// CAT
  this.rules[34].opcodes[1] = { type: 6, string: [117] };// TBS
  this.rules[34].opcodes[2] = { type: 4, index: 35 };// RNM(Hex)
  this.rules[34].opcodes[3] = { type: 4, index: 35 };// RNM(Hex)
  this.rules[34].opcodes[4] = { type: 4, index: 35 };// RNM(Hex)
  this.rules[34].opcodes[5] = { type: 4, index: 35 };// RNM(Hex)

  /* Hex */
  this.rules[35].opcodes = [];
  this.rules[35].opcodes[0] = { type: 1, children: [1,2,3] };// ALT
  this.rules[35].opcodes[1] = { type: 4, index: 89 };// RNM(DIGIT)
  this.rules[35].opcodes[2] = { type: 5, min: 65, max: 70 };// TRG
  this.rules[35].opcodes[3] = { type: 5, min: 97, max: 102 };// TRG

  /* Escape */
  this.rules[36].opcodes = [];
  this.rules[36].opcodes[0] = { type: 6, string: [92] };// TBS

  /* TextBlock */
  this.rules[37].opcodes = [];
  this.rules[37].opcodes[0] = { type: 2, children: [1,2,4,5,7] };// CAT
  this.rules[37].opcodes[1] = { type: 4, index: 39 };// RNM(ThreeDquotes)
  this.rules[37].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[37].opcodes[3] = { type: 4, index: 3 };// RNM(SP)
  this.rules[37].opcodes[4] = { type: 4, index: 4 };// RNM(NL)
  this.rules[37].opcodes[5] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[37].opcodes[6] = { type: 4, index: 38 };// RNM(TextBlockContent)
  this.rules[37].opcodes[7] = { type: 4, index: 39 };// RNM(ThreeDquotes)

  /* TextBlockContent */
  this.rules[38].opcodes = [];
  this.rules[38].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[38].opcodes[1] = { type: 4, index: 32 };// RNM(QuotedChar)
  this.rules[38].opcodes[2] = { type: 2, children: [3,5] };// CAT
  this.rules[38].opcodes[3] = { type: 3, min: 1, max: 2 };// REP
  this.rules[38].opcodes[4] = { type: 4, index: 90 };// RNM(DQUOTE)
  this.rules[38].opcodes[5] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[38].opcodes[6] = { type: 4, index: 32 };// RNM(QuotedChar)

  /* ThreeDquotes */
  this.rules[39].opcodes = [];
  this.rules[39].opcodes[0] = { type: 2, children: [1,2,3] };// CAT
  this.rules[39].opcodes[1] = { type: 4, index: 90 };// RNM(DQUOTE)
  this.rules[39].opcodes[2] = { type: 4, index: 90 };// RNM(DQUOTE)
  this.rules[39].opcodes[3] = { type: 4, index: 90 };// RNM(DQUOTE)

  /* ShapeSection */
  this.rules[40].opcodes = [];
  this.rules[40].opcodes[0] = { type: 3, min: 0, max: 1 };// REP
  this.rules[40].opcodes[1] = { type: 2, children: [2,3,4] };// CAT
  this.rules[40].opcodes[2] = { type: 4, index: 41 };// RNM(NamespaceStatement)
  this.rules[40].opcodes[3] = { type: 4, index: 42 };// RNM(UseSection)
  this.rules[40].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[40].opcodes[5] = { type: 4, index: 44 };// RNM(ShapeStatements)

  /* NamespaceStatement */
  this.rules[41].opcodes = [];
  this.rules[41].opcodes[0] = { type: 2, children: [1,2,3,4] };// CAT
  this.rules[41].opcodes[1] = { type: 6, string: [110,97,109,101,115,112,97,99,101] };// TBS
  this.rules[41].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[41].opcodes[3] = { type: 4, index: 83 };// RNM(Namespace)
  this.rules[41].opcodes[4] = { type: 4, index: 6 };// RNM(BR)

  /* UseSection */
  this.rules[42].opcodes = [];
  this.rules[42].opcodes[0] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[42].opcodes[1] = { type: 4, index: 43 };// RNM(UseStatement)

  /* UseStatement */
  this.rules[43].opcodes = [];
  this.rules[43].opcodes[0] = { type: 2, children: [1,2,3,4] };// CAT
  this.rules[43].opcodes[1] = { type: 6, string: [117,115,101] };// TBS
  this.rules[43].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[43].opcodes[3] = { type: 4, index: 82 };// RNM(AbsoluteRootShapeId)
  this.rules[43].opcodes[4] = { type: 4, index: 6 };// RNM(BR)

  /* ShapeStatements */
  this.rules[44].opcodes = [];
  this.rules[44].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[44].opcodes[1] = { type: 4, index: 45 };// RNM(ShapeOrApplyStatement)
  this.rules[44].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[44].opcodes[3] = { type: 2, children: [4,5] };// CAT
  this.rules[44].opcodes[4] = { type: 4, index: 6 };// RNM(BR)
  this.rules[44].opcodes[5] = { type: 4, index: 45 };// RNM(ShapeOrApplyStatement)

  /* ShapeOrApplyStatement */
  this.rules[45].opcodes = [];
  this.rules[45].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[45].opcodes[1] = { type: 4, index: 46 };// RNM(ShapeStatement)
  this.rules[45].opcodes[2] = { type: 4, index: 77 };// RNM(ApplyStatement)

  /* ShapeStatement */
  this.rules[46].opcodes = [];
  this.rules[46].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[46].opcodes[1] = { type: 4, index: 72 };// RNM(TraitStatements)
  this.rules[46].opcodes[2] = { type: 4, index: 47 };// RNM(Shape)

  /* Shape */
  this.rules[47].opcodes = [];
  this.rules[47].opcodes[0] = { type: 1, children: [1,2,3,4,5] };// ALT
  this.rules[47].opcodes[1] = { type: 4, index: 48 };// RNM(SimpleShape)
  this.rules[47].opcodes[2] = { type: 4, index: 51 };// RNM(EnumShape)
  this.rules[47].opcodes[3] = { type: 4, index: 56 };// RNM(AggregateShape)
  this.rules[47].opcodes[4] = { type: 4, index: 63 };// RNM(EntityShape)
  this.rules[47].opcodes[5] = { type: 4, index: 65 };// RNM(OperationShape)

  /* SimpleShape */
  this.rules[48].opcodes = [];
  this.rules[48].opcodes[0] = { type: 2, children: [1,2,3,4] };// CAT
  this.rules[48].opcodes[1] = { type: 4, index: 49 };// RNM(SimpleTypeName)
  this.rules[48].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[48].opcodes[3] = { type: 4, index: 84 };// RNM(Identifier)
  this.rules[48].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[48].opcodes[5] = { type: 4, index: 50 };// RNM(Mixins)

  /* SimpleTypeName */
  this.rules[49].opcodes = [];
  this.rules[49].opcodes[0] = { type: 1, children: [1,2,3,4,5,6,7,8,9,10,11,12,13] };// ALT
  this.rules[49].opcodes[1] = { type: 6, string: [98,108,111,98] };// TBS
  this.rules[49].opcodes[2] = { type: 6, string: [98,111,111,108,101,97,110] };// TBS
  this.rules[49].opcodes[3] = { type: 6, string: [100,111,99,117,109,101,110,116] };// TBS
  this.rules[49].opcodes[4] = { type: 6, string: [115,116,114,105,110,103] };// TBS
  this.rules[49].opcodes[5] = { type: 6, string: [98,121,116,101] };// TBS
  this.rules[49].opcodes[6] = { type: 6, string: [115,104,111,114,116] };// TBS
  this.rules[49].opcodes[7] = { type: 6, string: [105,110,116,101,103,101,114] };// TBS
  this.rules[49].opcodes[8] = { type: 6, string: [108,111,110,103] };// TBS
  this.rules[49].opcodes[9] = { type: 6, string: [102,108,111,97,116] };// TBS
  this.rules[49].opcodes[10] = { type: 6, string: [100,111,117,98,108,101] };// TBS
  this.rules[49].opcodes[11] = { type: 6, string: [98,105,103,73,110,116,101,103,101,114] };// TBS
  this.rules[49].opcodes[12] = { type: 6, string: [98,105,103,68,101,99,105,109,97,108] };// TBS
  this.rules[49].opcodes[13] = { type: 6, string: [116,105,109,101,115,116,97,109,112] };// TBS

  /* Mixins */
  this.rules[50].opcodes = [];
  this.rules[50].opcodes[0] = { type: 2, children: [1,3,4,6,7,9,14] };// CAT
  this.rules[50].opcodes[1] = { type: 3, min: 0, max: 1 };// REP
  this.rules[50].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[50].opcodes[3] = { type: 6, string: [119,105,116,104] };// TBS
  this.rules[50].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[50].opcodes[5] = { type: 4, index: 1 };// RNM(WS)
  this.rules[50].opcodes[6] = { type: 7, string: [91] };// TLS
  this.rules[50].opcodes[7] = { type: 3, min: 0, max: 1 };// REP
  this.rules[50].opcodes[8] = { type: 4, index: 1 };// RNM(WS)
  this.rules[50].opcodes[9] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[50].opcodes[10] = { type: 2, children: [11,12] };// CAT
  this.rules[50].opcodes[11] = { type: 4, index: 80 };// RNM(ShapeId)
  this.rules[50].opcodes[12] = { type: 3, min: 0, max: 1 };// REP
  this.rules[50].opcodes[13] = { type: 4, index: 1 };// RNM(WS)
  this.rules[50].opcodes[14] = { type: 7, string: [93] };// TLS

  /* EnumShape */
  this.rules[51].opcodes = [];
  this.rules[51].opcodes[0] = { type: 2, children: [1,2,3,4,6,8] };// CAT
  this.rules[51].opcodes[1] = { type: 4, index: 52 };// RNM(EnumTypeName)
  this.rules[51].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[51].opcodes[3] = { type: 4, index: 84 };// RNM(Identifier)
  this.rules[51].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[51].opcodes[5] = { type: 4, index: 50 };// RNM(Mixins)
  this.rules[51].opcodes[6] = { type: 3, min: 0, max: 1 };// REP
  this.rules[51].opcodes[7] = { type: 4, index: 1 };// RNM(WS)
  this.rules[51].opcodes[8] = { type: 4, index: 53 };// RNM(EnumShapeMembers)

  /* EnumTypeName */
  this.rules[52].opcodes = [];
  this.rules[52].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[52].opcodes[1] = { type: 6, string: [101,110,117,109] };// TBS
  this.rules[52].opcodes[2] = { type: 6, string: [105,110,116,69,110,117,109] };// TBS

  /* EnumShapeMembers */
  this.rules[53].opcodes = [];
  this.rules[53].opcodes[0] = { type: 2, children: [1,2,4,9] };// CAT
  this.rules[53].opcodes[1] = { type: 7, string: [123] };// TLS
  this.rules[53].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[53].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[53].opcodes[4] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[53].opcodes[5] = { type: 2, children: [6,7] };// CAT
  this.rules[53].opcodes[6] = { type: 4, index: 54 };// RNM(EnumShapeMember)
  this.rules[53].opcodes[7] = { type: 3, min: 0, max: 1 };// REP
  this.rules[53].opcodes[8] = { type: 4, index: 1 };// RNM(WS)
  this.rules[53].opcodes[9] = { type: 7, string: [125] };// TLS

  /* EnumShapeMember */
  this.rules[54].opcodes = [];
  this.rules[54].opcodes[0] = { type: 2, children: [1,2,3] };// CAT
  this.rules[54].opcodes[1] = { type: 4, index: 72 };// RNM(TraitStatements)
  this.rules[54].opcodes[2] = { type: 4, index: 84 };// RNM(Identifier)
  this.rules[54].opcodes[3] = { type: 3, min: 0, max: 1 };// REP
  this.rules[54].opcodes[4] = { type: 4, index: 55 };// RNM(ValueAssignment)

  /* ValueAssignment */
  this.rules[55].opcodes = [];
  this.rules[55].opcodes[0] = { type: 2, children: [1,3,4,6,7,9,11] };// CAT
  this.rules[55].opcodes[1] = { type: 3, min: 0, max: 1 };// REP
  this.rules[55].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[55].opcodes[3] = { type: 7, string: [61] };// TLS
  this.rules[55].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[55].opcodes[5] = { type: 4, index: 3 };// RNM(SP)
  this.rules[55].opcodes[6] = { type: 4, index: 14 };// RNM(NodeValue)
  this.rules[55].opcodes[7] = { type: 3, min: 0, max: 1 };// REP
  this.rules[55].opcodes[8] = { type: 4, index: 3 };// RNM(SP)
  this.rules[55].opcodes[9] = { type: 3, min: 0, max: 1 };// REP
  this.rules[55].opcodes[10] = { type: 4, index: 2 };// RNM(Comma)
  this.rules[55].opcodes[11] = { type: 4, index: 6 };// RNM(BR)

  /* AggregateShape */
  this.rules[56].opcodes = [];
  this.rules[56].opcodes[0] = { type: 2, children: [1,2,3,4,6,8,10] };// CAT
  this.rules[56].opcodes[1] = { type: 4, index: 57 };// RNM(AggregateTypeName)
  this.rules[56].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[56].opcodes[3] = { type: 4, index: 84 };// RNM(Identifier)
  this.rules[56].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[56].opcodes[5] = { type: 4, index: 58 };// RNM(ForResource)
  this.rules[56].opcodes[6] = { type: 3, min: 0, max: 1 };// REP
  this.rules[56].opcodes[7] = { type: 4, index: 50 };// RNM(Mixins)
  this.rules[56].opcodes[8] = { type: 3, min: 0, max: 1 };// REP
  this.rules[56].opcodes[9] = { type: 4, index: 1 };// RNM(WS)
  this.rules[56].opcodes[10] = { type: 4, index: 59 };// RNM(ShapeMembers)

  /* AggregateTypeName */
  this.rules[57].opcodes = [];
  this.rules[57].opcodes[0] = { type: 1, children: [1,2,3,4] };// ALT
  this.rules[57].opcodes[1] = { type: 6, string: [108,105,115,116] };// TBS
  this.rules[57].opcodes[2] = { type: 6, string: [109,97,112] };// TBS
  this.rules[57].opcodes[3] = { type: 6, string: [117,110,105,111,110] };// TBS
  this.rules[57].opcodes[4] = { type: 6, string: [115,116,114,117,99,116,117,114,101] };// TBS

  /* ForResource */
  this.rules[58].opcodes = [];
  this.rules[58].opcodes[0] = { type: 2, children: [1,2,3,4] };// CAT
  this.rules[58].opcodes[1] = { type: 4, index: 3 };// RNM(SP)
  this.rules[58].opcodes[2] = { type: 6, string: [102,111,114] };// TBS
  this.rules[58].opcodes[3] = { type: 4, index: 3 };// RNM(SP)
  this.rules[58].opcodes[4] = { type: 4, index: 80 };// RNM(ShapeId)

  /* ShapeMembers */
  this.rules[59].opcodes = [];
  this.rules[59].opcodes[0] = { type: 2, children: [1,2,4,9] };// CAT
  this.rules[59].opcodes[1] = { type: 7, string: [123] };// TLS
  this.rules[59].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[59].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[59].opcodes[4] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[59].opcodes[5] = { type: 2, children: [6,7] };// CAT
  this.rules[59].opcodes[6] = { type: 4, index: 60 };// RNM(ShapeMember)
  this.rules[59].opcodes[7] = { type: 3, min: 0, max: 1 };// REP
  this.rules[59].opcodes[8] = { type: 4, index: 1 };// RNM(WS)
  this.rules[59].opcodes[9] = { type: 7, string: [125] };// TLS

  /* ShapeMember */
  this.rules[60].opcodes = [];
  this.rules[60].opcodes[0] = { type: 2, children: [1,2,5] };// CAT
  this.rules[60].opcodes[1] = { type: 4, index: 72 };// RNM(TraitStatements)
  this.rules[60].opcodes[2] = { type: 1, children: [3,4] };// ALT
  this.rules[60].opcodes[3] = { type: 4, index: 61 };// RNM(ExplicitShapeMember)
  this.rules[60].opcodes[4] = { type: 4, index: 62 };// RNM(ElidedShapeMember)
  this.rules[60].opcodes[5] = { type: 3, min: 0, max: 1 };// REP
  this.rules[60].opcodes[6] = { type: 4, index: 55 };// RNM(ValueAssignment)

  /* ExplicitShapeMember */
  this.rules[61].opcodes = [];
  this.rules[61].opcodes[0] = { type: 2, children: [1,2,4,5,7] };// CAT
  this.rules[61].opcodes[1] = { type: 4, index: 84 };// RNM(Identifier)
  this.rules[61].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[61].opcodes[3] = { type: 4, index: 3 };// RNM(SP)
  this.rules[61].opcodes[4] = { type: 7, string: [58] };// TLS
  this.rules[61].opcodes[5] = { type: 3, min: 0, max: 1 };// REP
  this.rules[61].opcodes[6] = { type: 4, index: 3 };// RNM(SP)
  this.rules[61].opcodes[7] = { type: 4, index: 80 };// RNM(ShapeId)

  /* ElidedShapeMember */
  this.rules[62].opcodes = [];
  this.rules[62].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[62].opcodes[1] = { type: 7, string: [36] };// TLS
  this.rules[62].opcodes[2] = { type: 4, index: 84 };// RNM(Identifier)

  /* EntityShape */
  this.rules[63].opcodes = [];
  this.rules[63].opcodes[0] = { type: 2, children: [1,2,3,4,6,8] };// CAT
  this.rules[63].opcodes[1] = { type: 4, index: 64 };// RNM(EntityTypeName)
  this.rules[63].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[63].opcodes[3] = { type: 4, index: 84 };// RNM(Identifier)
  this.rules[63].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[63].opcodes[5] = { type: 4, index: 50 };// RNM(Mixins)
  this.rules[63].opcodes[6] = { type: 3, min: 0, max: 1 };// REP
  this.rules[63].opcodes[7] = { type: 4, index: 1 };// RNM(WS)
  this.rules[63].opcodes[8] = { type: 4, index: 16 };// RNM(NodeObject)

  /* EntityTypeName */
  this.rules[64].opcodes = [];
  this.rules[64].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[64].opcodes[1] = { type: 6, string: [115,101,114,118,105,99,101] };// TBS
  this.rules[64].opcodes[2] = { type: 6, string: [114,101,115,111,117,114,99,101] };// TBS

  /* OperationShape */
  this.rules[65].opcodes = [];
  this.rules[65].opcodes[0] = { type: 2, children: [1,2,3,4,6,8] };// CAT
  this.rules[65].opcodes[1] = { type: 6, string: [111,112,101,114,97,116,105,111,110] };// TBS
  this.rules[65].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[65].opcodes[3] = { type: 4, index: 84 };// RNM(Identifier)
  this.rules[65].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[65].opcodes[5] = { type: 4, index: 50 };// RNM(Mixins)
  this.rules[65].opcodes[6] = { type: 3, min: 0, max: 1 };// REP
  this.rules[65].opcodes[7] = { type: 4, index: 1 };// RNM(WS)
  this.rules[65].opcodes[8] = { type: 4, index: 66 };// RNM(OperationBody)

  /* OperationBody */
  this.rules[66].opcodes = [];
  this.rules[66].opcodes[0] = { type: 2, children: [1,2,4,9] };// CAT
  this.rules[66].opcodes[1] = { type: 7, string: [123] };// TLS
  this.rules[66].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[66].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[66].opcodes[4] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[66].opcodes[5] = { type: 2, children: [6,7] };// CAT
  this.rules[66].opcodes[6] = { type: 4, index: 67 };// RNM(OperationProperty)
  this.rules[66].opcodes[7] = { type: 3, min: 0, max: 1 };// REP
  this.rules[66].opcodes[8] = { type: 4, index: 1 };// RNM(WS)
  this.rules[66].opcodes[9] = { type: 7, string: [125] };// TLS

  /* OperationProperty */
  this.rules[67].opcodes = [];
  this.rules[67].opcodes[0] = { type: 1, children: [1,2,3] };// ALT
  this.rules[67].opcodes[1] = { type: 4, index: 68 };// RNM(OperationInput)
  this.rules[67].opcodes[2] = { type: 4, index: 69 };// RNM(OperationOutput)
  this.rules[67].opcodes[3] = { type: 4, index: 70 };// RNM(OperationErrors)

  /* OperationInput */
  this.rules[68].opcodes = [];
  this.rules[68].opcodes[0] = { type: 2, children: [1,2,4] };// CAT
  this.rules[68].opcodes[1] = { type: 6, string: [105,110,112,117,116] };// TBS
  this.rules[68].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[68].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[68].opcodes[4] = { type: 1, children: [5,6] };// ALT
  this.rules[68].opcodes[5] = { type: 4, index: 71 };// RNM(InlineAggregateShape)
  this.rules[68].opcodes[6] = { type: 2, children: [7,8,10] };// CAT
  this.rules[68].opcodes[7] = { type: 7, string: [58] };// TLS
  this.rules[68].opcodes[8] = { type: 3, min: 0, max: 1 };// REP
  this.rules[68].opcodes[9] = { type: 4, index: 1 };// RNM(WS)
  this.rules[68].opcodes[10] = { type: 4, index: 80 };// RNM(ShapeId)

  /* OperationOutput */
  this.rules[69].opcodes = [];
  this.rules[69].opcodes[0] = { type: 2, children: [1,2,4] };// CAT
  this.rules[69].opcodes[1] = { type: 6, string: [111,117,116,112,117,116] };// TBS
  this.rules[69].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[69].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[69].opcodes[4] = { type: 1, children: [5,6] };// ALT
  this.rules[69].opcodes[5] = { type: 4, index: 71 };// RNM(InlineAggregateShape)
  this.rules[69].opcodes[6] = { type: 2, children: [7,8,10] };// CAT
  this.rules[69].opcodes[7] = { type: 7, string: [58] };// TLS
  this.rules[69].opcodes[8] = { type: 3, min: 0, max: 1 };// REP
  this.rules[69].opcodes[9] = { type: 4, index: 1 };// RNM(WS)
  this.rules[69].opcodes[10] = { type: 4, index: 80 };// RNM(ShapeId)

  /* OperationErrors */
  this.rules[70].opcodes = [];
  this.rules[70].opcodes[0] = { type: 2, children: [1,2,4,5,7,8,10,15] };// CAT
  this.rules[70].opcodes[1] = { type: 6, string: [101,114,114,111,114,115] };// TBS
  this.rules[70].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[70].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[70].opcodes[4] = { type: 7, string: [58] };// TLS
  this.rules[70].opcodes[5] = { type: 3, min: 0, max: 1 };// REP
  this.rules[70].opcodes[6] = { type: 4, index: 1 };// RNM(WS)
  this.rules[70].opcodes[7] = { type: 7, string: [91] };// TLS
  this.rules[70].opcodes[8] = { type: 3, min: 0, max: 1 };// REP
  this.rules[70].opcodes[9] = { type: 4, index: 1 };// RNM(WS)
  this.rules[70].opcodes[10] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[70].opcodes[11] = { type: 2, children: [12,13] };// CAT
  this.rules[70].opcodes[12] = { type: 4, index: 80 };// RNM(ShapeId)
  this.rules[70].opcodes[13] = { type: 3, min: 0, max: 1 };// REP
  this.rules[70].opcodes[14] = { type: 4, index: 1 };// RNM(WS)
  this.rules[70].opcodes[15] = { type: 7, string: [93] };// TLS

  /* InlineAggregateShape */
  this.rules[71].opcodes = [];
  this.rules[71].opcodes[0] = { type: 2, children: [1,2,4,5,7,9,11] };// CAT
  this.rules[71].opcodes[1] = { type: 7, string: [58,61] };// TLS
  this.rules[71].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[71].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[71].opcodes[4] = { type: 4, index: 72 };// RNM(TraitStatements)
  this.rules[71].opcodes[5] = { type: 3, min: 0, max: 1 };// REP
  this.rules[71].opcodes[6] = { type: 4, index: 58 };// RNM(ForResource)
  this.rules[71].opcodes[7] = { type: 3, min: 0, max: 1 };// REP
  this.rules[71].opcodes[8] = { type: 4, index: 50 };// RNM(Mixins)
  this.rules[71].opcodes[9] = { type: 3, min: 0, max: 1 };// REP
  this.rules[71].opcodes[10] = { type: 4, index: 1 };// RNM(WS)
  this.rules[71].opcodes[11] = { type: 4, index: 59 };// RNM(ShapeMembers)

  /* TraitStatements */
  this.rules[72].opcodes = [];
  this.rules[72].opcodes[0] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[72].opcodes[1] = { type: 2, children: [2,3] };// CAT
  this.rules[72].opcodes[2] = { type: 4, index: 73 };// RNM(Trait)
  this.rules[72].opcodes[3] = { type: 3, min: 0, max: 1 };// REP
  this.rules[72].opcodes[4] = { type: 4, index: 1 };// RNM(WS)

  /* Trait */
  this.rules[73].opcodes = [];
  this.rules[73].opcodes[0] = { type: 2, children: [1,2,3] };// CAT
  this.rules[73].opcodes[1] = { type: 7, string: [64] };// TLS
  this.rules[73].opcodes[2] = { type: 4, index: 80 };// RNM(ShapeId)
  this.rules[73].opcodes[3] = { type: 3, min: 0, max: 1 };// REP
  this.rules[73].opcodes[4] = { type: 4, index: 74 };// RNM(TraitBody)

  /* TraitBody */
  this.rules[74].opcodes = [];
  this.rules[74].opcodes[0] = { type: 2, children: [1,2,4,8] };// CAT
  this.rules[74].opcodes[1] = { type: 7, string: [40] };// TLS
  this.rules[74].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[74].opcodes[3] = { type: 4, index: 1 };// RNM(WS)
  this.rules[74].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[74].opcodes[5] = { type: 1, children: [6,7] };// ALT
  this.rules[74].opcodes[6] = { type: 4, index: 75 };// RNM(TraitStructure)
  this.rules[74].opcodes[7] = { type: 4, index: 76 };// RNM(TraitNode)
  this.rules[74].opcodes[8] = { type: 7, string: [41] };// TLS

  /* TraitStructure */
  this.rules[75].opcodes = [];
  this.rules[75].opcodes[0] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[75].opcodes[1] = { type: 2, children: [2,3] };// CAT
  this.rules[75].opcodes[2] = { type: 4, index: 17 };// RNM(NodeObjectKvp)
  this.rules[75].opcodes[3] = { type: 3, min: 0, max: 1 };// REP
  this.rules[75].opcodes[4] = { type: 4, index: 1 };// RNM(WS)

  /* TraitNode */
  this.rules[76].opcodes = [];
  this.rules[76].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[76].opcodes[1] = { type: 4, index: 14 };// RNM(NodeValue)
  this.rules[76].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[76].opcodes[3] = { type: 4, index: 1 };// RNM(WS)

  /* ApplyStatement */
  this.rules[77].opcodes = [];
  this.rules[77].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[77].opcodes[1] = { type: 4, index: 78 };// RNM(ApplyStatementSingular)
  this.rules[77].opcodes[2] = { type: 4, index: 79 };// RNM(ApplyStatementBlock)

  /* ApplyStatementSingular */
  this.rules[78].opcodes = [];
  this.rules[78].opcodes[0] = { type: 2, children: [1,2,3,4,5] };// CAT
  this.rules[78].opcodes[1] = { type: 6, string: [97,112,112,108,121] };// TBS
  this.rules[78].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[78].opcodes[3] = { type: 4, index: 80 };// RNM(ShapeId)
  this.rules[78].opcodes[4] = { type: 4, index: 1 };// RNM(WS)
  this.rules[78].opcodes[5] = { type: 4, index: 73 };// RNM(Trait)

  /* ApplyStatementBlock */
  this.rules[79].opcodes = [];
  this.rules[79].opcodes[0] = { type: 2, children: [1,2,3,4,5,6,8,9] };// CAT
  this.rules[79].opcodes[1] = { type: 6, string: [97,112,112,108,121] };// TBS
  this.rules[79].opcodes[2] = { type: 4, index: 3 };// RNM(SP)
  this.rules[79].opcodes[3] = { type: 4, index: 80 };// RNM(ShapeId)
  this.rules[79].opcodes[4] = { type: 4, index: 1 };// RNM(WS)
  this.rules[79].opcodes[5] = { type: 7, string: [123] };// TLS
  this.rules[79].opcodes[6] = { type: 3, min: 0, max: 1 };// REP
  this.rules[79].opcodes[7] = { type: 4, index: 1 };// RNM(WS)
  this.rules[79].opcodes[8] = { type: 4, index: 72 };// RNM(TraitStatements)
  this.rules[79].opcodes[9] = { type: 7, string: [125] };// TLS

  /* ShapeId */
  this.rules[80].opcodes = [];
  this.rules[80].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[80].opcodes[1] = { type: 4, index: 81 };// RNM(RootShapeId)
  this.rules[80].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[80].opcodes[3] = { type: 4, index: 87 };// RNM(ShapeIdMember)

  /* RootShapeId */
  this.rules[81].opcodes = [];
  this.rules[81].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[81].opcodes[1] = { type: 4, index: 82 };// RNM(AbsoluteRootShapeId)
  this.rules[81].opcodes[2] = { type: 4, index: 84 };// RNM(Identifier)

  /* AbsoluteRootShapeId */
  this.rules[82].opcodes = [];
  this.rules[82].opcodes[0] = { type: 2, children: [1,2,3] };// CAT
  this.rules[82].opcodes[1] = { type: 4, index: 83 };// RNM(Namespace)
  this.rules[82].opcodes[2] = { type: 7, string: [35] };// TLS
  this.rules[82].opcodes[3] = { type: 4, index: 84 };// RNM(Identifier)

  /* Namespace */
  this.rules[83].opcodes = [];
  this.rules[83].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[83].opcodes[1] = { type: 4, index: 84 };// RNM(Identifier)
  this.rules[83].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[83].opcodes[3] = { type: 2, children: [4,5] };// CAT
  this.rules[83].opcodes[4] = { type: 7, string: [46] };// TLS
  this.rules[83].opcodes[5] = { type: 4, index: 84 };// RNM(Identifier)

  /* Identifier */
  this.rules[84].opcodes = [];
  this.rules[84].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[84].opcodes[1] = { type: 4, index: 85 };// RNM(IdentifierStart)
  this.rules[84].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[84].opcodes[3] = { type: 4, index: 86 };// RNM(IdentifierChars)

  /* IdentifierStart */
  this.rules[85].opcodes = [];
  this.rules[85].opcodes[0] = { type: 1, children: [1,7] };// ALT
  this.rules[85].opcodes[1] = { type: 2, children: [2,4] };// CAT
  this.rules[85].opcodes[2] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[85].opcodes[3] = { type: 7, string: [95] };// TLS
  this.rules[85].opcodes[4] = { type: 1, children: [5,6] };// ALT
  this.rules[85].opcodes[5] = { type: 4, index: 88 };// RNM(ALPHA)
  this.rules[85].opcodes[6] = { type: 4, index: 89 };// RNM(DIGIT)
  this.rules[85].opcodes[7] = { type: 4, index: 88 };// RNM(ALPHA)

  /* IdentifierChars */
  this.rules[86].opcodes = [];
  this.rules[86].opcodes[0] = { type: 1, children: [1,2,3] };// ALT
  this.rules[86].opcodes[1] = { type: 4, index: 88 };// RNM(ALPHA)
  this.rules[86].opcodes[2] = { type: 4, index: 89 };// RNM(DIGIT)
  this.rules[86].opcodes[3] = { type: 7, string: [95] };// TLS

  /* ShapeIdMember */
  this.rules[87].opcodes = [];
  this.rules[87].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[87].opcodes[1] = { type: 7, string: [36] };// TLS
  this.rules[87].opcodes[2] = { type: 4, index: 84 };// RNM(Identifier)

  /* ALPHA */
  this.rules[88].opcodes = [];
  this.rules[88].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[88].opcodes[1] = { type: 5, min: 65, max: 90 };// TRG
  this.rules[88].opcodes[2] = { type: 5, min: 97, max: 122 };// TRG

  /* DIGIT */
  this.rules[89].opcodes = [];
  this.rules[89].opcodes[0] = { type: 5, min: 48, max: 57 };// TRG

  /* DQUOTE */
  this.rules[90].opcodes = [];
  this.rules[90].opcodes[0] = { type: 6, string: [34] };// TBS

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function toString(){
    let str = "";
    str += "; Interface Definition Language (IDL) for Smithy\n";
    str += "idl =\n";
    str += "    [WS] ControlSection MetadataSection ShapeSection\n";
    str += "\n";
    str += "; Whitespace\n";
    str += "WS =\n";
    str += "    1*(SP / NL / Comment / Comma) ; whitespace\n";
    str += "\n";
    str += "Comma =\n";
    str += "    \",\"\n";
    str += "\n";
    str += "SP =\n";
    str += "    1*(%x20 / %x09) ; one or more spaces or tabs\n";
    str += "\n";
    str += "NL =\n";
    str += "    %x0A / %x0D.0A ; Newline: \\n and \\r\\n\n";
    str += "\n";
    str += "NotNL =\n";
    str += "    %x09 / %x20-10FFFF ; Any character except newline\n";
    str += "\n";
    str += "BR =\n";
    str += "    [SP] 1*(Comment / NL) [WS]; line break followed by whitespace\n";
    str += "\n";
    str += "; Comments\n";
    str += "Comment =\n";
    str += "    DocumentationComment / LineComment\n";
    str += "\n";
    str += "DocumentationComment =\n";
    str += "    \"///\" *NotNL NL\n";
    str += "\n";
    str += "LineComment =\n";
    str += "    \"//\" [(%x09 / %x20-2E / %x30-10FFF) *NotNL] NL\n";
    str += "    ; First character after \"//\" can't be \"/\"\n";
    str += "\n";
    str += "; Control\n";
    str += "ControlSection =\n";
    str += "    *(ControlStatement)\n";
    str += "\n";
    str += "ControlStatement =\n";
    str += "    \"$\" NodeObjectKey [SP] \":\" [SP] NodeValue BR\n";
    str += "\n";
    str += "; Metadata\n";
    str += "MetadataSection =\n";
    str += "    *(MetadataStatement)\n";
    str += "\n";
    str += "MetadataStatement =\n";
    str += "    %s\"metadata\" SP NodeObjectKey [SP] \"=\" [SP] NodeValue BR\n";
    str += "\n";
    str += "; Node values\n";
    str += "NodeValue =\n";
    str += "    NodeArray\n";
    str += "  / NodeObject\n";
    str += "  / Number\n";
    str += "  / NodeKeyword\n";
    str += "  / NodeStringValue\n";
    str += "\n";
    str += "NodeArray =\n";
    str += "    \"[\" [WS] *(NodeValue [WS]) \"]\"\n";
    str += "\n";
    str += "NodeObject =\n";
    str += "    \"{\" [WS] [NodeObjectKvp *(WS NodeObjectKvp)] [WS] \"}\"\n";
    str += "\n";
    str += "NodeObjectKvp =\n";
    str += "    NodeObjectKey [WS] \":\" [WS] NodeValue\n";
    str += "\n";
    str += "NodeObjectKey =\n";
    str += "    QuotedText / Identifier\n";
    str += "\n";
    str += "Number =\n";
    str += "    [Minus] Int [Frac] [Exp]\n";
    str += "\n";
    str += "DecimalPoint =\n";
    str += "    %x2E ; .\n";
    str += "\n";
    str += "DigitOneToNine =\n";
    str += "    %x31-39 ; 1-9\n";
    str += "\n";
    str += "E =\n";
    str += "    %x65 / %x45 ; e E\n";
    str += "\n";
    str += "Exp =\n";
    str += "    E [Minus / Plus] 1*DIGIT\n";
    str += "\n";
    str += "Frac =\n";
    str += "    DecimalPoint 1*DIGIT\n";
    str += "\n";
    str += "Int =\n";
    str += "    Zero / (DigitOneToNine *DIGIT)\n";
    str += "\n";
    str += "Minus =\n";
    str += "    %x2D ; -\n";
    str += "\n";
    str += "Plus =\n";
    str += "    %x2B ; +\n";
    str += "\n";
    str += "Zero =\n";
    str += "    %x30 ; 0\n";
    str += "\n";
    str += "NodeKeyword =\n";
    str += "    %s\"true\" / %s\"false\" / %s\"null\"\n";
    str += "\n";
    str += "NodeStringValue =\n";
    str += "    ShapeId / TextBlock / QuotedText\n";
    str += "\n";
    str += "QuotedText =\n";
    str += "    DQUOTE *QuotedChar DQUOTE\n";
    str += "\n";
    str += "QuotedChar =\n";
    str += "    %x09        ; tab\n";
    str += "  / %x20-21     ; space - \"!\"\n";
    str += "  / %x23-5B     ; \"#\" - \"[\"\n";
    str += "  / %x5D-10FFFF ; \"]\"+\n";
    str += "  / EscapedChar\n";
    str += "  / NL\n";
    str += "\n";
    str += "EscapedChar =\n";
    str += "    Escape (Escape / DQUOTE / %s\"b\" / %s\"f\"\n";
    str += "             / %s\"n\" / %s\"r\" / %s\"t\" / \"/\"\n";
    str += "             / UnicodeEscape)\n";
    str += "\n";
    str += "UnicodeEscape =\n";
    str += "    %s\"u\" Hex Hex Hex Hex\n";
    str += "\n";
    str += "Hex =\n";
    str += "    DIGIT / %x41-46 / %x61-66\n";
    str += "\n";
    str += "Escape =\n";
    str += "    %x5C ; backslash\n";
    str += "\n";
    str += "TextBlock =\n";
    str += "    ThreeDquotes [SP] NL *TextBlockContent ThreeDquotes\n";
    str += "\n";
    str += "TextBlockContent =\n";
    str += "    QuotedChar / (1*2DQUOTE 1*QuotedChar)\n";
    str += "\n";
    str += "ThreeDquotes =\n";
    str += "    DQUOTE DQUOTE DQUOTE\n";
    str += "\n";
    str += "; Shapes\n";
    str += "ShapeSection =\n";
    str += "    [NamespaceStatement UseSection [ShapeStatements]]\n";
    str += "\n";
    str += "NamespaceStatement =\n";
    str += "    %s\"namespace\" SP Namespace BR\n";
    str += "\n";
    str += "UseSection =\n";
    str += "    *(UseStatement)\n";
    str += "\n";
    str += "UseStatement =\n";
    str += "    %s\"use\" SP AbsoluteRootShapeId BR\n";
    str += "\n";
    str += "ShapeStatements =\n";
    str += "    ShapeOrApplyStatement *(BR ShapeOrApplyStatement)\n";
    str += "\n";
    str += "ShapeOrApplyStatement =\n";
    str += "    ShapeStatement / ApplyStatement\n";
    str += "\n";
    str += "ShapeStatement =\n";
    str += "    TraitStatements Shape\n";
    str += "\n";
    str += "Shape =\n";
    str += "    SimpleShape\n";
    str += "  / EnumShape\n";
    str += "  / AggregateShape\n";
    str += "  / EntityShape\n";
    str += "  / OperationShape\n";
    str += "\n";
    str += "SimpleShape =\n";
    str += "    SimpleTypeName SP Identifier [Mixins]\n";
    str += "\n";
    str += "SimpleTypeName =\n";
    str += "    %s\"blob\" / %s\"boolean\" / %s\"document\" / %s\"string\"\n";
    str += "  / %s\"byte\" / %s\"short\" / %s\"integer\" / %s\"long\"\n";
    str += "  / %s\"float\" / %s\"double\" / %s\"bigInteger\"\n";
    str += "  / %s\"bigDecimal\" / %s\"timestamp\"\n";
    str += "\n";
    str += "Mixins =\n";
    str += "    [SP] %s\"with\" [WS] \"[\" [WS] 1*(ShapeId [WS]) \"]\"\n";
    str += "\n";
    str += "EnumShape =\n";
    str += "    EnumTypeName SP Identifier [Mixins] [WS] EnumShapeMembers\n";
    str += "\n";
    str += "EnumTypeName =\n";
    str += "    %s\"enum\" / %s\"intEnum\"\n";
    str += "\n";
    str += "EnumShapeMembers =\n";
    str += "    \"{\" [WS] 1*(EnumShapeMember [WS]) \"}\"\n";
    str += "\n";
    str += "EnumShapeMember =\n";
    str += "    TraitStatements Identifier [ValueAssignment]\n";
    str += "\n";
    str += "ValueAssignment =\n";
    str += "    [SP] \"=\" [SP] NodeValue [SP] [Comma] BR\n";
    str += "\n";
    str += "AggregateShape =\n";
    str += "    AggregateTypeName SP Identifier [ForResource] [Mixins]\n";
    str += "     [WS] ShapeMembers\n";
    str += "\n";
    str += "AggregateTypeName =\n";
    str += "    %s\"list\" / %s\"map\" / %s\"union\" / %s\"structure\"\n";
    str += "\n";
    str += "ForResource =\n";
    str += "    SP %s\"for\" SP ShapeId\n";
    str += "\n";
    str += "ShapeMembers =\n";
    str += "    \"{\" [WS] *(ShapeMember [WS]) \"}\"\n";
    str += "\n";
    str += "ShapeMember =\n";
    str += "    TraitStatements (ExplicitShapeMember / ElidedShapeMember)\n";
    str += "     [ValueAssignment]\n";
    str += "\n";
    str += "ExplicitShapeMember =\n";
    str += "    Identifier [SP] \":\" [SP] ShapeId\n";
    str += "\n";
    str += "ElidedShapeMember =\n";
    str += "    \"$\" Identifier\n";
    str += "\n";
    str += "EntityShape =\n";
    str += "    EntityTypeName SP Identifier [Mixins] [WS] NodeObject\n";
    str += "\n";
    str += "EntityTypeName =\n";
    str += "    %s\"service\" / %s\"resource\"\n";
    str += "\n";
    str += "OperationShape =\n";
    str += "    %s\"operation\" SP Identifier [Mixins] [WS] OperationBody\n";
    str += "\n";
    str += "OperationBody =\n";
    str += "    \"{\" [WS] *(OperationProperty [WS]) \"}\"\n";
    str += "\n";
    str += "OperationProperty =\n";
    str += "    OperationInput / OperationOutput / OperationErrors\n";
    str += "\n";
    str += "OperationInput =\n";
    str += "    %s\"input\" [WS] (InlineAggregateShape / (\":\" [WS] ShapeId))\n";
    str += "\n";
    str += "OperationOutput =\n";
    str += "    %s\"output\" [WS] (InlineAggregateShape / (\":\" [WS] ShapeId))\n";
    str += "\n";
    str += "OperationErrors =\n";
    str += "    %s\"errors\" [WS] \":\" [WS] \"[\" [WS] *(ShapeId [WS]) \"]\"\n";
    str += "\n";
    str += "InlineAggregateShape =\n";
    str += "    \":=\" [WS] TraitStatements [ForResource] [Mixins]\n";
    str += "     [WS] ShapeMembers\n";
    str += "\n";
    str += "; Traits\n";
    str += "TraitStatements =\n";
    str += "    *(Trait [WS])\n";
    str += "\n";
    str += "Trait =\n";
    str += "    \"@\" ShapeId [TraitBody]\n";
    str += "\n";
    str += "TraitBody =\n";
    str += "    \"(\" [WS] [TraitStructure / TraitNode] \")\"\n";
    str += "\n";
    str += "TraitStructure =\n";
    str += "    1*(NodeObjectKvp [WS])\n";
    str += "\n";
    str += "TraitNode =\n";
    str += "    NodeValue [WS]\n";
    str += "\n";
    str += "ApplyStatement =\n";
    str += "    ApplyStatementSingular / ApplyStatementBlock\n";
    str += "\n";
    str += "ApplyStatementSingular =\n";
    str += "    %s\"apply\" SP ShapeId WS Trait\n";
    str += "\n";
    str += "ApplyStatementBlock =\n";
    str += "    %s\"apply\" SP ShapeId WS \"{\" [WS] TraitStatements \"}\"\n";
    str += "\n";
    str += "; Shape ID\n";
    str += "ShapeId =\n";
    str += "    RootShapeId [ShapeIdMember]\n";
    str += "\n";
    str += "RootShapeId =\n";
    str += "    AbsoluteRootShapeId / Identifier\n";
    str += "\n";
    str += "AbsoluteRootShapeId =\n";
    str += "    Namespace \"#\" Identifier\n";
    str += "\n";
    str += "Namespace =\n";
    str += "    Identifier *(\".\" Identifier)\n";
    str += "\n";
    str += "Identifier =\n";
    str += "    IdentifierStart *IdentifierChars\n";
    str += "\n";
    str += "IdentifierStart =\n";
    str += "    (1*\"_\" (ALPHA / DIGIT)) / ALPHA\n";
    str += "\n";
    str += "IdentifierChars =\n";
    str += "    ALPHA / DIGIT / \"_\"\n";
    str += "\n";
    str += "ShapeIdMember =\n";
    str += "    \"$\" Identifier\n";
    str += "\n";
    str += "; ADDED\n";
    str += "ALPHA = %x41-5A / %x61-7A  ; A-Z / a-z\n";
    str += "DIGIT = %x30-39  ; 0-9\n";
    str += "DQUOTE = %x22  ; \"\n";
    return str;
  }
}
